#!/usr/bin/env ruby
require 'open3'
require 'readline'
mode = ARGV.shift
$debug=!!ARGV.delete("-d")
case mode
when "record"
  cmd = ["rr", "record", "mruby"] + ARGV
  system(*cmd)
  exit 0
when "replay"
  cmd = ["rr", "replay", '-i=mi'] + ARGV
when "gdb"
  cmd = ["gdb", '-i=mi', ARGV[0]]
  args = ARGV[1..-1]
end


class GDBMI
  class Input
    attr_accessor :token, :stdin
    def initialize(gdb_stdin)
      @token = 0
      @stdin = gdb_stdin
    end
    def fmt(operation)
      "#{token}-#{operation} \n"
    end
    def exec(operation)
      puts "(exec): #{fmt(operation)}" if $debug
      stdin.write(fmt(operation))
      @token+=1
    end
    def raw_exec(operation)
      puts "(raw-exec): #{operation.strip}\n" if $debug
      stdin.write(operation+"\n")
    end
    def exec_restart(checkpoint=0)
      raw_exec("restart #{checkpoint}")
    end
    def exec_start
      raw_exec("start")
    end
    def exec_arguments(args)
      exec("exec-arguments #{args.join(' ')}")
    end

    def exec_continue
      exec("exec-continue")
    end

    def data_eval_expr(expr)
      expr.gsub!('"', '\\"')
      exec("data-evaluate-expression \"#{expr}\"")
    end

    def break_insert(line, condition=nil, temp=false)
      condition.gsub!('"', '\\"') if condition
      condition_flag = condition ? " -c \"#{condition}\" " : " "
      temp_flag = temp ? " -t " : " "
      exec("break-insert #{temp_flag} #{condition_flag} #{line}")
    end

    def break_disable(bpno)
      exec("break-disable #{bpno}")
    end

    def break_enable(bpno)
      exec("break-enable #{bpno}")
    end

    def gdb_set(expr)
      exec("gdb-set #{expr}")
    end

    def mrr_break_on_start
      break_insert("mrr_rr_hook", nil, true)
    end

    def mrr_break_insert(file, line, temp=false)
      break_insert("mrr_rr_hook", "$_streq(file, \"#{file}\") == 1 && line == #{line}", temp)
    end

    def mrr_eval(rb_expr)
      len = rb_expr.size
      rb_expr.gsub!('"', '\\"')
      expr = "mrr_cmd_print(mrb, dbg, \"#{rb_expr}\")"
      data_eval_expr(expr)
    end
  end
end

class RR
  class State
    attr_accessor :current_file, :current_line, :prev_file, :prev_line, :skip_till_ruby, :bps
    def current_line=(val)
      @current_line = val.to_i
    end

    def initialize(mi_input)
      @mutex = Mutex.new
      @ready = false
      @done = false
      @skip_till_ruby = false
      @temp_disabled = []
      @mi_input = mi_input
      @bps = {}
    end

    def inspect
      puts "current_line: #{current_line}"
      puts "current_file: #{current_file}"
    end
    def list(file=nil, line=nil, line_count=10)
      file ||= current_file
      line ||= current_line
      puts "no current file" unless file && line > 0
      start_line = line - (line_count/2)
      end_line = start_line + line_count
      range = start_line..end_line
      File.open(file).each_line.with_index do |l,i|
        j = i+1
        next unless range.include?(j)
        indicator = j == current_line ? "=>" : "  "
        puts "#{indicator} #{j}: #{l}"
      end
    end

    def get_frame(gdb_output)
    end

    def mark_not_done!
      @mutex.synchronize {@done = false}
    end

    def mark_done!
      @mutex.synchronize {@done = true}
    end

    def mark_not_ready!
      @mutex.synchronize {@ready = false}
    end

    def mark_ready!
      @mutex.synchronize {@ready = true}
    end

    def wait_till_done
      loop do
        @mutex.synchronize {return if @done}
        puts "waiting till done" if $debug
        sleep 0.1
      end
    end

    def wait_till_ready
      loop do
        @mutex.synchronize {return if @ready}
        puts "waiting till ready" if $debug
        sleep 0.1
      end
    end

    def step_next
      mark_not_done!
      loc = "#{current_file}:#{current_line}"
      current_bpno = @bps.dig(loc,:bpno)
      @mi_input.break_disable(current_bpno) if current_bpno
      @temp_disabled << current_bpno
      @mi_input.mrr_break_insert(current_file, current_line+1, true)
      wait_till_done
      @mi_input.exec_continue
      mark_not_ready!
      wait_till_ready
    end

    def move_cur_to_prev
      self.prev_file = self.current_file
      self.prev_line = self.current_line
    end
    def list_bps
      p @bps
    end
    def break_insert(file, lineno)
      @mi_input.mrr_break_insert(file, lineno)
    end
    def mutate(gdb_output)
      puts gdb_output if $debug
      case gdb_output
      when /^\*stopped,reason="exited-normally".*$/
        self.mark_ready!
      when /^\*stopped,reason="signal-received".*$/
        self.mark_ready!
        move_cur_to_prev
      when /^\*stopped,frame.*$/
        self.mark_ready!
      when /^\*stopped,reason="breakpoint-hit".*$/
        gdb_output =~ /name="file",value="0x\h+[^\\]+\\"([^\\]+)\\""},{name="line",value="(\d+)"}/
        move_cur_to_prev
        @temp_disabled.each { |bpno| @mi_input.break_enable(bpno) }
        @temp_disabled = []
        self.current_file = $1
        self.current_line = $2
        if self.skip_till_ruby && $1
          self.mark_ready!
        elsif !self.skip_till_ruby
          self.mark_ready!
        end
        @mi_input.exec_continue if skip_till_ruby && !$1
      when /^\*running,.*/
        nil
      when /^\d+\^done,bkpt={number="(\d+)".*\_streq\(file, \\"([^\\]+)\\"\).*line == (\d+).*$/
        @bps["#{$2}:#{$3}"]={enabled: true, bpno: $1.to_i}
        mark_done!
      when /^\d+\^done,.*$/
        mark_done!
      else
      end
      p self if $debug
    end
  end
end

Open3.popen3(*cmd) do |stdin, stdout, stderr, wait_thr|
  mi_input = GDBMI::Input.new(stdin)
  rr_state = RR::State.new(mi_input)
  Thread.new do
    loop do
      stderr.read
    end
  end
  Thread.new do
    loop do
      buf = stdout.readline.strip
      case buf
      when /^~.*/
        puts "(gdbout) #{buf}" if $debug
      when /^=.*/
        puts "(gdbout) #{buf}" if $debug
      when /^\*.*$/
        rr_state.mutate(buf)
      when /^\(gdb\)$/
        puts "(gdbout) #{buf}" if $debug
      when /^\d*\^.*/
        rr_state.mutate(buf)
      when /^&.*/
        puts "(gdbout) #{buf}" if $debug
      else
        puts buf
      end
    end
  end
  if mode!="gdb"
    rr_state.wait_till_ready
    mi_input.mrr_break_on_start
    rr_state.skip_till_ruby=true
    mi_input.exec_continue
  else
    rr_state.skip_till_ruby=true
    mi_input.mrr_break_on_start
    rr_state.mark_not_ready!
    mi_input.exec_arguments(args)
    mi_input.exec_start
    rr_state.wait_till_ready
  end
  while buf = Readline.readline("(mruby-rr) ", false)
    p "(input): #{buf}" if $debug
    case buf.strip
    when "restart"
      rr_state.mark_not_ready!
      mi_input.exec_restart
      rr_state.wait_till_ready
    when "start"
      rr_state.mark_not_ready!
      mi_input.exec_arguments(args) if mode == "gdb"
      mi_input.exec_start
      mi_input.mrr_break_on_start
      mi_input.exec_continue
      rr_state.wait_till_ready
    when /^c(ontinue)?$/
      rr_state.skip_till_ruby=true
      rr_state.mark_not_ready!
      mi_input.exec_continue
      rr_state.wait_till_ready
    when /^b(reak)?\s+([^\s]+)\s+(\d+)/
      mi_input.mrr_break_insert($2, $3)
    when /eval\s+(.*)/
      mi_input.mrr_eval($1)
    when /^n(ext)?$/
      rr_state.step_next
    when "info break"
      rr_state.list_bps
    when /^l(ist)?$/
      rr_state.list
    when /^gdb (.*)$/
      stdin.puts($1)
    else
      stdin.puts(buf)
    end
  end
end
